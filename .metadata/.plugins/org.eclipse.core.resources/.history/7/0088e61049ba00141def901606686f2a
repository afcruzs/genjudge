package unal.edu.gpj
import org.apache.shiro.SecurityUtils

class ContestController {

	def loginService
	def index() {
		render( view: "index", model : [ contests : Contest.list() ] )
	}

	def seeProblems(){
		def submissions = Submission.findAllByUser(loginService.getCurrentUser())
		def contest = Contest.get(Long.parseLong(params.contestId))
		
		def submittedProblems = contest.submission.intersect(submissions)
		def alreadySolvedProblems = submittedProblems.findAll{ sub -> sub.correct == true }
		
		def waitingTestCases = TestCaseDownload.findAllByUser(loginService.getCurrentUser()).findAll{ 
				tc -> 
					tc.downloadDate.compareTo(new Date()) < 0 &&
					tc.dueDate.compareTo(new Date()) > 0  
			}*.getTestCase()
		
		def waitingProblems = []
		def problems = Problem.list()
		
		for(TestCase tc : waitingTestCases)
			waitingProblems.addAll( problems.find{ problem -> problem.testCases.contains(tc) }  )
			
		def temp = (waitingProblems + alreadySolvedProblems).intersect(problems)
		
		def contestProblems = contest.getProblems()
		
		for( Problem p : temp )
			contestProblems.remove(temp)
		
		
		
		render( 
			view: "seeProblems", 
			model : [ 
				user : loginService.getCurrentUser(), 
				contest : contest,
				alreadySolvedProblems: alreadySolvedProblems,
				waitingProblems : waitingProblems,
				toBeDownloadedProblems : contestProblems
			] )
	}
	
	def downloadInput(){
		Problem problem = Problem.get(1)
		def bytes
		def testCase
		for(TestCase tc : problem.testCases){
			bytes = tc.inputFile
			testCase = tc 	
			break
		}
		
		Calendar timeout = Calendar.getInstance();
		Date currDate = new Date()
		Date dueDate = new Date(currDate.getTime() + problem.timeToAnswer)
		
		TestCaseDownload download = new TestCaseDownload(
				user:loginService.getCurrentUser(),
				testCase:testCase,
				downloadDate: new Date(),
				dueDate:dueDate
			)
		
		
		
		response.setContentType("application/text") 
		response.setHeader("Content-disposition", "attachment;filename=\"input.txt\"")
		response.outputStream << bytes
		
	}
	
	def uploadOutput(){

		def bytesFile = request.getFile('file').getBytes()
		def type = request.getFile('file').contentType
		
		def downloads = TestCaseDownload.findAllByUser(loginService.getCurrentUser()) as TestCaseDownload[]
		downloads.sort{a,b -> -a.downloadDate.compareTo(b.downloadDate)}
		def latestDownload = downloads[0]
		
		if( type.equals("text/plain") ){
			if( Arrays.equals(latestDownload.testCase.outputFile, bytesFile) ){
				render "Accepted :)"
			}else{
				render "Wrong Answer :("
			}
		}else{
			render "please send ONLY text files :)"
		}
	}
}
